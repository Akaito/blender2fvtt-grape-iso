{
  "_id": "tZ6P3VnDG01IXp9U",
  "name": "blender2grape-iso",
  "type": "script",
  "sort": 100001,
  "flags": {
    "exportSource": {
      "world": "5e-srd",
      "system": "dnd5e",
      "coreVersion": "0.7.9",
      "systemVersion": "1.2.0"
    }
  },
  "scope": "global",
  "command": "const isoWallsFolder = `worlds/${game.world.name}/assets/${canvas.scene.name}/iso-walls`;\nconst tileResolution = 400;  // tiles render out square, tileResolution x tileResolution.\n\nconst gridSize = canvas.scene.data.grid;\nlet foundrySceneOrigin = [\n  Math.floor((canvas.scene.data.width\n    + canvas.scene.data.padding*2*canvas.scene.data.width) / 2),\n  Math.floor((canvas.scene.data.height +\n    canvas.scene.data.padding*2*canvas.scene.data.height) / 2),\n];\nfoundrySceneOrigin[0] -= foundrySceneOrigin[0] % gridSize;\nfoundrySceneOrigin[1] -= foundrySceneOrigin[1] % gridSize;\n\nmain();\nui.notifications.info(`Copy rendered walls to ${isoWallsFolder}/`);\n\n\n/////\n// from grape_juice-isometrics module\nfunction getWorldTransformMatrix() {\n\t    const world = new Matrix();\n        world.a = canvas.app.stage.worldTransform.a;\n        world.b = canvas.app.stage.worldTransform.b;\n        world.c = canvas.app.stage.worldTransform.c;\n        world.d = canvas.app.stage.worldTransform.d;\n        world.e = canvas.app.stage.worldTransform.tx;\n        world.f = canvas.app.stage.worldTransform.ty;\n        return world\n}\n\nfunction preCreateTileStuff(b) {\n    // console.error('in if')\n    let sprite = new PIXI.Sprite()\n    sprite.width = b.width\n    sprite.height = b.height\n\n    sprite.x = b.x\n    sprite.y = b.y\n\n    canvas.tiles.addChild(sprite)\n\n\n    m = getWorldTransformPIXIMatrix()\n\n    sprite.transform.setFromMatrix(m)\n\n    // m.a = world.a\n    // m.b = world.b\n    // m.c = world.c\n    // m.d = world.d\n    // m.tx = world.e\n    // m.ty = world.f\n    // b.transform.setFromMatrix(m)\n\n    b.height *= sprite.height * canvas.stage.scale.y\n    b.width *= sprite.width * canvas.stage.scale.x\n    b.rotation = (sprite.rotation / (Math.PI / 180))\n    // b.x = sprite.x\n    // b.y = sprite.y\n    canvas.tiles.removeChild(sprite)\n    return b;\n}\n/////\n\n\n\nasync function main() {\n  let jsn = get_blender_jsn();\n  // Walls\n  let newWalls = [];\n  jsn['blenderWalls']?.map(wall => {newWalls.push.apply(newWalls, blenderWall2FoundryWalls(wall));});\n  let createdWalls = await canvas.scene.createEmbeddedEntity('Wall', newWalls);\n  console.log('createdWalls: ', createdWalls);\n\n  // Tiles\n  let newTiles = [];\n  jsn['blenderWalls']?.forEach(wall => {newTiles.push(blenderWall2Tile(wall));});\n  let createdTiles = await canvas.scene.createEmbeddedEntity('Tile', newTiles);\n  console.log('createdTiles:', createdTiles);\n\n  await hookWalls(createdWalls, createdTiles);\n\n  //let w = canvas.walls.filter(w => w.flags?.blender2grapeiso?.blenderObjectName === 'wall.001');\n  //console.log(w);\n\n\n  canvas.walls.activate();  // switch to walls layer\n}\n\n\n\n\n// Flip x and y from the Blender export.\n// This is kind of a hack.\n// Blender's camera is assumed to be looking down neg-x, pos-y.\n// Foundry in Grape's isometric is looking down pos-x, neg-y.\nfunction blenderWall2FoundryWalls(blenderWallJson) {\n  let result = [];\n  blenderWallJson?.foundryWalls?.forEach(wallJson => {\n    let sense = CONST.WALL_SENSE_TYPES.NORMAL;\n    if (wallJson['isFrontFacing'] !== true)\n      sense = CONST.WALL_SENSE_TYPES.NONE;\n    result.push({\n      c: [\n        foundrySceneOrigin[0] + wallJson.a.world[1] * gridSize,\n        foundrySceneOrigin[1] + wallJson.a.world[0] * gridSize,\n        foundrySceneOrigin[0] + wallJson.b.world[1] * gridSize,\n        foundrySceneOrigin[1] + wallJson.b.world[0] * gridSize\n      ],\n      sense: sense,\n      flags: {\n        blender2grapeiso: {\n          blenderObjectName: blenderWallJson.blenderObjectName,\n          isFrontFacing: wallJson['isFrontFacing'],\n        }\n      },\n    });\n  });\n  return result;\n}\n\n\nfunction blenderWall2Tile(blenderWallJson) {\n  //console.log(blenderWallJson);\n  // Calculate scale per tile.  Every tile is rendered 400x400,\n  // regardless of how big it is in-world.\n  let fWalls = Array.from(blenderWallJson.foundryWalls);\n  let minWorldX = fWalls\n    .map(fWall => Math.min(fWall.a.world[1], fWall.b.world[1]))\n    .reduce((min, current) => Math.min(min, current));\n  let maxWorldX = fWalls\n    .map(fWall => Math.max(fWall.a.world[1], fWall.b.world[1]))\n    .reduce((max, current) => Math.max(max, current));\n  let worldXDist = Math.abs(maxWorldX - minWorldX) * gridSize;\n\n  let tilePos = {\n    x: blenderWallJson.renderUpperLeftWorld[1] * gridSize,\n    y: blenderWallJson.renderUpperLeftWorld[0] * gridSize,\n  };\n  /*\n  console.log('pre-transform ', tilePos);\n  Hooks.call('transformPosToIso', tilePos);\n  console.log('post-transform', tilePos);\n  */\n\n  let worldMtx = getWorldTransformMatrix();\n  worldMtx.inverse().applyToPoint(tilePos.x, tilePos.y);\n\n  let width = blenderWallJson.renderWidth;\n  let height = blenderWallJson.renderHeight;\n  let postGrape = preCreateTileStuff({\n    x: foundrySceneOrigin[0] + tilePos.x,\n    y: foundrySceneOrigin[1] + tilePos.y,\n    width: blenderWallJson.renderWidth,\n    height: blenderWallJson.renderHeight,\n  });\n\n  //console.log(blenderWallJson.blenderObjectName, worldXDist, renderXDist, tileScale);\n  return {\n    img: `${isoWallsFolder}/${blenderWallJson.blenderObjectName}.png`,\n    width: postGrape.width,\n    height: postGrape.height,\n    //x: foundrySceneOrigin[0] + blenderWallJson.renderUpperLeftWorld[1] * gridSize,\n    x: postGrape.x,\n    y: postGrape.y,\n    z: 300,  // TODO : What makes sense here?\n    rotation: postGrape.rotation,\n    hidden: false,\n    locked: false,  // TODO : Put back to locked.\n    flags: {\n      blender2grapeiso: {\n        blenderObjectName: blenderWallJson.blenderObjectName,\n      },\n      //'grape_juice-isometrics': {},\n    },\n  };\n}\n\n\nasync function hookWalls(wallDatas, tileDatas) {\n  for (let tileData of tileDatas) {\n    console.log('tileData:', tileData);\n    console.log('wallDatas:', wallDatas);\n    let frontWallDatas = wallDatas\n      .filter(w => w.flags.blender2grapeiso.blenderObjectName === tileData.flags.blender2grapeiso.blenderObjectName)\n      .filter(w => w.flags.blender2grapeiso.isFrontFacing === true);\n    console.log('frontWallDatas:', frontWallDatas);\n    await canvas.tiles.get(tileData._id)\n      .setFlag(\n        'grape_juice-isometrics',\n        'attach_wall_id',\n        frontWallDatas.map(w => w._id).join(',')\n      );\n    await canvas.tiles.get(tileData._id)\n      .setFlag('grape_juice-isometrics', 'hook_door_id', '');\n    await canvas.tiles.get(tileData._id)\n      .setFlag('grape_juice-isometrics', 'tile_alpha', '0');\n  }\n}\n\n\nfunction get_blender_jsn() {\n  return {\"blenderWalls\": [{\"blenderObjectName\": \"wall.001\", \"foundryWalls\": [{\"a\": {\"imagePixel\": [619.679932, -166.040421], \"renderCamera\": [-1.5, -0.866051], \"world\": [0.0, 1.0, 0.0]}, \"b\": {\"imagePixel\": [811.405151, -498.121399], \"renderCamera\": [-2.5, -1.443396], \"world\": [0.0, 0.0, 0.0]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [1386.580688, 1162.283447], \"renderCamera\": [2.5, -3.17543], \"world\": [4.0, 1.0, 0.0]}, \"b\": {\"imagePixel\": [619.679932, -166.040421], \"renderCamera\": [-1.5, -0.866051], \"world\": [0.0, 1.0, 0.0]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [1578.305908, 830.202515], \"renderCamera\": [1.5, -3.752775], \"world\": [4.0, 0.0, 0.0]}, \"b\": {\"imagePixel\": [1386.580688, 1162.283447], \"renderCamera\": [2.5, -3.17543], \"world\": [4.0, 1.0, 0.0]}, \"isFrontFacing\": true}, {\"a\": {\"imagePixel\": [811.405151, -498.121399], \"renderCamera\": [-2.5, -1.443396], \"world\": [0.0, 0.0, 0.0]}, \"b\": {\"imagePixel\": [1578.305908, 830.202515], \"renderCamera\": [1.5, -3.752775], \"world\": [4.0, 0.0, 0.0]}, \"isFrontFacing\": true}], \"renderHeight\": 665.1618614482435, \"renderUpperLeftWorld\": [-5.126443, 3.873668], \"renderWidth\": 665.1618614482435}, {\"blenderObjectName\": \"wall.002\", \"foundryWalls\": [{\"a\": {\"imagePixel\": [1386.580566, -498.121552], \"renderCamera\": [-2.5, -3.17543], \"world\": [-1.0, -4.0, 0.0]}, \"b\": {\"imagePixel\": [1578.305908, -166.040543], \"renderCamera\": [-1.5, -3.752775], \"world\": [0.0, -4.0, 0.0]}, \"isFrontFacing\": true}, {\"a\": {\"imagePixel\": [619.679688, 830.202515], \"renderCamera\": [1.5, -0.86605], \"world\": [-1.0, 0.0, 0.0]}, \"b\": {\"imagePixel\": [1386.580566, -498.121552], \"renderCamera\": [-2.5, -3.17543], \"world\": [-1.0, -4.0, 0.0]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [811.404907, 1162.283447], \"renderCamera\": [2.5, -1.443395], \"world\": [0.0, 0.0, 0.0]}, \"b\": {\"imagePixel\": [619.679688, 830.202515], \"renderCamera\": [1.5, -0.86605], \"world\": [-1.0, 0.0, 0.0]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [1578.305908, -166.040543], \"renderCamera\": [-1.5, -3.752775], \"world\": [0.0, -4.0, 0.0]}, \"b\": {\"imagePixel\": [811.404907, 1162.283447], \"renderCamera\": [2.5, -1.443395], \"world\": [0.0, 0.0, 0.0]}, \"isFrontFacing\": true}], \"renderHeight\": 665.1618614482435, \"renderUpperLeftWorld\": [-7.626442, 1.37367], \"renderWidth\": 665.1618614482435}, {\"blenderObjectName\": \"wall.003\", \"foundryWalls\": [{\"a\": {\"imagePixel\": [619.679626, -166.040405], \"renderCamera\": [-1.5, -0.86605], \"world\": [6.0, 1.0, 0.0]}, \"b\": {\"imagePixel\": [811.404846, -498.121338], \"renderCamera\": [-2.5, -1.443395], \"world\": [6.0, 0.0, 0.0]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [1386.580444, 1162.283203], \"renderCamera\": [2.5, -3.17543], \"world\": [10.0, 1.0, 0.0]}, \"b\": {\"imagePixel\": [619.679626, -166.040405], \"renderCamera\": [-1.5, -0.86605], \"world\": [6.0, 1.0, 0.0]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [1578.305664, 830.202271], \"renderCamera\": [1.5, -3.752774], \"world\": [10.0, 0.0, 0.0]}, \"b\": {\"imagePixel\": [1386.580444, 1162.283203], \"renderCamera\": [2.5, -3.17543], \"world\": [10.0, 1.0, 0.0]}, \"isFrontFacing\": true}, {\"a\": {\"imagePixel\": [811.404846, -498.121338], \"renderCamera\": [-2.5, -1.443395], \"world\": [6.0, 0.0, 0.0]}, \"b\": {\"imagePixel\": [1578.305664, 830.202271], \"renderCamera\": [1.5, -3.752774], \"world\": [10.0, 0.0, 0.0]}, \"isFrontFacing\": true}], \"renderHeight\": 665.1618016855683, \"renderUpperLeftWorld\": [0.873553, 3.87367], \"renderWidth\": 665.1618016855683}, {\"blenderObjectName\": \"wall.concave\", \"foundryWalls\": [{\"a\": {\"imagePixel\": [204.168167, 408.329926], \"renderCamera\": [1.000001, -1.6e-05], \"world\": [6.830998, -2.267165, -0.186482]}, \"b\": {\"imagePixel\": [439.915314, 0.000158], \"renderCamera\": [-0.999999, -1.154706], \"world\": [6.830998, -4.267165, -0.186482]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [462.523499, 233.071869], \"renderCamera\": [0.141587, -1.265441], \"world\": [7.497692, -3.792273, -0.186482]}, \"b\": {\"imagePixel\": [204.168167, 408.329926], \"renderCamera\": [1.000001, -1.6e-05], \"world\": [6.830998, -2.267165, -0.186482]}, \"isFrontFacing\": true}, {\"a\": {\"imagePixel\": [439.915314, 0.000158], \"renderCamera\": [-0.999999, -1.154706], \"world\": [6.830998, -4.267165, -0.186482]}, \"b\": {\"imagePixel\": [675.662354, 408.329895], \"renderCamera\": [1.000001, -2.309396], \"world\": [8.830998, -4.267165, -0.186482]}, \"isFrontFacing\": true}, {\"a\": {\"imagePixel\": [675.662354, 408.329895], \"renderCamera\": [1.000001, -2.309396], \"world\": [8.830998, -4.267165, -0.186482]}, \"b\": {\"imagePixel\": [462.523499, 233.071869], \"renderCamera\": [0.141587, -1.265441], \"world\": [7.497692, -3.792273, -0.186482]}, \"isFrontFacing\": false}], \"renderHeight\": 409.32974187205974, \"renderUpperLeftWorld\": [3.362753, -2.108318], \"renderWidth\": 409.32974187205974}, {\"blenderObjectName\": \"wall.floorTile1x1\", \"foundryWalls\": [{\"a\": {\"imagePixel\": [37.245419, 88.122787], \"renderCamera\": [1e-06, 0.577346], \"world\": [6.0, -8.0, 0.0]}, \"b\": {\"imagePixel\": [88.122597, 0.000105], \"renderCamera\": [-0.999999, 1e-06], \"world\": [6.0, -9.0, 0.0]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [88.122597, 0.000105], \"renderCamera\": [-0.999999, 1e-06], \"world\": [6.0, -9.0, 0.0]}, \"b\": {\"imagePixel\": [138.999741, 88.122787], \"renderCamera\": [1e-06, -0.577343], \"world\": [7.0, -9.0, 0.0]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [138.999741, 88.122787], \"renderCamera\": [1e-06, -0.577343], \"world\": [7.0, -9.0, 0.0]}, \"b\": {\"imagePixel\": [88.122559, 176.245468], \"renderCamera\": [1.000001, 1e-06], \"world\": [7.0, -8.0, 0.0]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [88.122559, 176.245468], \"renderCamera\": [1.000001, 1e-06], \"world\": [7.0, -8.0, 0.0]}, \"b\": {\"imagePixel\": [37.245419, 88.122787], \"renderCamera\": [1e-06, 0.577346], \"world\": [6.0, -8.0, 0.0]}, \"isFrontFacing\": false}], \"renderHeight\": 177.24536711645723, \"renderUpperLeftWorld\": [5.133967, -8.133969], \"renderWidth\": 177.24536711645723}, {\"blenderObjectName\": \"wall.floorTile2x2\", \"foundryWalls\": [{\"a\": {\"imagePixel\": [-27.340517, 176.745377], \"renderCamera\": [-0.0, 1.154689], \"world\": [1.0, -9.0, 0.0]}, \"b\": {\"imagePixel\": [176.745575, -176.745377], \"renderCamera\": [-2.0, -1e-06], \"world\": [1.0, -11.0, 0.0]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [176.745575, -176.745377], \"renderCamera\": [-2.0, -1e-06], \"world\": [1.0, -11.0, 0.0]}, \"b\": {\"imagePixel\": [380.831604, 176.745377], \"renderCamera\": [-0.0, -1.154691], \"world\": [3.0, -11.0, 0.0]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [380.831604, 176.745377], \"renderCamera\": [-0.0, -1.154691], \"world\": [3.0, -11.0, 0.0]}, \"b\": {\"imagePixel\": [176.745529, 530.236145], \"renderCamera\": [2.0, -1e-06], \"world\": [3.0, -9.0, 0.0]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [176.745529, 530.236145], \"renderCamera\": [2.0, -1e-06], \"world\": [3.0, -9.0, 0.0]}, \"b\": {\"imagePixel\": [-27.340517, 176.745377], \"renderCamera\": [-0.0, 1.154689], \"world\": [1.0, -9.0, 0.0]}, \"isFrontFacing\": false}], \"renderHeight\": 354.49076411425204, \"renderUpperLeftWorld\": [-0.732068, -9.267934], \"renderWidth\": 354.49076411425204}, {\"blenderObjectName\": \"wall.floorTile4x1\", \"foundryWalls\": [{\"a\": {\"imagePixel\": [-98.008118, -110.528305], \"renderCamera\": [-1.5, 1.443362], \"world\": [8.0, -7.0, 0.0]}, \"b\": {\"imagePixel\": [29.617846, -331.585022], \"renderCamera\": [-2.5, 0.866017], \"world\": [8.0, -8.0, 0.0]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [29.617846, -331.585022], \"renderCamera\": [-2.5, 0.866017], \"world\": [8.0, -8.0, 0.0]}, \"b\": {\"imagePixel\": [540.121582, 552.642029], \"renderCamera\": [1.500001, -1.443362], \"world\": [12.0, -8.0, 0.0]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [540.121582, 552.642029], \"renderCamera\": [1.500001, -1.443362], \"world\": [12.0, -8.0, 0.0]}, \"b\": {\"imagePixel\": [412.495636, 773.698792], \"renderCamera\": [2.500001, -0.866017], \"world\": [12.0, -7.0, 0.0]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [412.495636, 773.698792], \"renderCamera\": [2.500001, -0.866017], \"world\": [12.0, -7.0, 0.0]}, \"b\": {\"imagePixel\": [-98.008118, -110.528305], \"renderCamera\": [-1.5, 1.443362], \"world\": [8.0, -7.0, 0.0]}, \"isFrontFacing\": false}], \"renderHeight\": 443.1134327318119, \"renderUpperLeftWorld\": [6.584914, -6.584918], \"renderWidth\": 443.1134327318119}, {\"blenderObjectName\": \"wall.weird\", \"foundryWalls\": [{\"a\": {\"imagePixel\": [240.833344, 364.716583], \"renderCamera\": [1.341261, -0.546005], \"world\": [2.903578, -4.473557, -0.186482]}, \"b\": {\"imagePixel\": [321.481262, -53.160671], \"renderCamera\": [-1.341259, -1.063716], \"world\": [2.010673, -6.263172, -0.186482]}, \"isFrontFacing\": false}, {\"a\": {\"imagePixel\": [389.732208, 256.999084], \"renderCamera\": [0.649779, -1.501846], \"world\": [3.385627, -5.647088, -0.186482]}, \"b\": {\"imagePixel\": [240.833344, 364.716583], \"renderCamera\": [1.341261, -0.546005], \"world\": [2.903578, -4.473557, -0.186482]}, \"isFrontFacing\": true}, {\"a\": {\"imagePixel\": [321.481262, -53.160671], \"renderCamera\": [-1.341259, -1.063716], \"world\": [2.010673, -6.263172, -0.186482]}, \"b\": {\"imagePixel\": [430.477539, 77.267281], \"renderCamera\": [-0.503991, -1.763406], \"world\": [3.035263, -6.450493, -0.186482]}, \"isFrontFacing\": true}, {\"a\": {\"imagePixel\": [430.477539, 77.267281], \"renderCamera\": [-0.503991, -1.763406], \"world\": [3.035263, -6.450493, -0.186482]}, \"b\": {\"imagePixel\": [389.732208, 256.999084], \"renderCamera\": [0.649779, -1.501846], \"world\": [3.385627, -5.647088, -0.186482]}, \"isFrontFacing\": true}], \"renderHeight\": 312.55571329507796, \"renderUpperLeftWorld\": [-0.4623, -4.212346], \"renderWidth\": 312.55571329507796}], \"scale\": 0}\n}",
  "author": "2pwDDMtPZQq5dX12",
  "img": "icons/svg/castle.svg",
  "actorIds": []
}